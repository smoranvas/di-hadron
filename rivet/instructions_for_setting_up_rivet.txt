#first get the docker image containing rivet and pythia
docker pull electronioncollider/pythia-eic-tutorial
# OR do this through apptainer if docker is not available (like at JLab).
# to do the second option, set the cache directory somewhere that you have a lot of space,
# before pulling the container
export APPTAINER_CACHEDIR=/work/clas12/spaul/cache; 
apptainer pull docker://electronioncollider/pythia-eic-tutorial

#then create the following aliases:
export RIVET_CONTAINER_NAME=electronioncollider/pythia-eic-tutorial
alias rivet='docker run -i  --rm  -u `id -u $USER`:`id -g` -v $PWD:$PWD -w $PWD $RIVET_CONTAINER_NAME rivet'
alias rivet-mkanalysis='docker run -i  --rm  -u `id -u $USER`:`id -g` -v $PWD:$PWD -w $PWD $RIVET_CONTAINER_NAME rivet-mkanalysis'
alias rivet-build='docker run -i  --rm  -u `id -u $USER`:`id -g` -v $PWD:$PWD -w $PWD $RIVET_CONTAINER_NAME rivet-build'
alias rivet-mkhtml='docker run -i  --rm  -u `id -u $USER`:`id -g` -v $PWD:$PWD -w $PWD $RIVET_CONTAINER_NAME rivet-mkhtml'
alias yodamerge='docker run -i  --rm  -u `id -u $USER`:`id -g` -v $PWD:$PWD -w $PWD $RIVET_CONTAINER_NAME yodamerge'

# OR if using apptainer, 
export RIVET_CONTAINER_NAME=${PWD}/pythia-eic-tutorial_latest.sif
alias rivet='apptainer $RIVET_CONTAINER_NAME rivet'
alias rivet-mkanalysis='apptainer run $RIVET_CONTAINER_NAME rivet-mkanalysis'
alias rivet-build='apptainer run $RIVET_CONTAINER_NAME rivet-build'
alias rivet-mkhtml='apptainer run $RIVET_CONTAINER_NAME rivet-mkhtml'
alias yodamerge='apptainer run $RIVET_CONTAINER_NAME yodamerge'



# to build a plugin:
rivet-build Rivet_pion_proton_correlations.so pion_proton_correlations.cc 

# test this plugin (for a specific input file)
rivet -a pion_proton_correlations --pwd -o output.yoda eD_64.hepmc 
